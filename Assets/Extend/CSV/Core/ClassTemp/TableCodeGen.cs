using UnityEngine;
using System.Collections;
using System.Collections.Generic;

public class TableCodeGen
{
	const string codeTemplate = @"// This code automatically generated by TableCodeGen
using UnityEngine;
using System.Collections;
using System.Collections.Generic;

public class $CLASS : CsvTable
{
    [System.Serializable]
	public class Row
	{
$ROW_MEMBER_CODE
	}

	List<Row> rowList = new List<Row>();

	public List<Row> GetRowList()
	{
		return rowList;
	}

	public override void Load(string csvData)
	{
		rowList.Clear();
		grid = ParserCSV.Parse(csvData);
		for(int i = 1 ; i < grid.Length ; i++)
		{
			Row row = new Row();
$ROW_READ_CODE
			rowList.Add(row);
		}
		isLoaded = true;
	}
    public override string UnLoad()
    {
        WhileNull();
        for (int i = 1; i < rowList.Count + 1; i++)
        {
            Row row = rowList[i-1];
$ROW_SAVE_CODE
        }
       return UParserCSV.UParser(grid);
    }
    private void WhileNull()
    {
        //if (grid == null)
        //{
            grid = new string[rowList.Count + 1][];
$ROW_WHILENULL_CODE1
        //}

        for (int i = 1; i<rowList.Count + 1; i++)
        {
$ROW_WHILENULL_CODE2
        }
    }

	public int NumRows()
	{
		return rowList.Count;
	}

	public Row GetAt(int i)
	{
		if(rowList.Count <= i)
			return null;
		return rowList[i];
	}

$FIND_CODE
}";

	const string findCodeTemplate =
@"	public Row Find_$COLUMN(string find)
	{
		return rowList.Find(x => x.$FIND_COLUMN == find);
	}
	public List<Row> FindAll_$COLUMN(string find)
	{
		return rowList.FindAll(x => x.$FIND_COLUMN == find);
	}
";

	public static string Generate(string csvText,string[] type, string className)
	{
		if(string.IsNullOrEmpty(csvText))
			return null;
		
		string[][] grid = ParserCSV.Parse(csvText);
		if(grid.Length < 1)
			return null;

		string rowMemberCode = "";
		string rowReadCode = "";
        string rowSaveCode = "";
		string findCode = "";
        string whileNullCode1 = string.Format("\t\t\tif (grid[0] == null) grid[0] = new string[{0}];\n", grid[0].Length);
        string whileNullCode2 = string.Format("\t\t\tif (grid[i] == null) grid[i] = new string[{0}];", grid[0].Length);
        for (int i = 0 ; i < grid[0].Length ; i++)
		{
            whileNullCode1 += string.Format("\t\t\tgrid[0][{0}] = \"{1}\";\n", i, grid[0][i]);
            if (type[i] == "string")
            {
                rowMemberCode += string.Format("\t\tpublic string {0};\n", grid[0][i]);
                rowReadCode += string.Format("\t\t\trow.{0} = grid[i][{1}];\n", grid[0][i], i);
                rowSaveCode += string.Format("\t\t\tgrid[i][{0}] = row.{1};\n", i, grid[0][i]);
                findCode += findCodeTemplate.Replace("$FIND_COLUMN", grid[0][i]).Replace("$COLUMN", grid[0][i]);
            }
            else
            {
                rowMemberCode += string.Format("\t\tpublic {0} {1};\n", type[i], grid[0][i]);
                rowReadCode += string.Format("\t\t\trow.{0} = {1}.Parse(grid[i][{2}]);\n", grid[0][i], type[i], i);
                rowSaveCode += string.Format("\t\t\tgrid[i][{0}] = row.{1}.ToString();\n", i, grid[0][i]);
                findCode += findCodeTemplate.Replace("$FIND_COLUMN", grid[0][i]+ ".ToString()").Replace("$COLUMN", grid[0][i]);
            }
        }

        string code = codeTemplate;
		code = code.Replace("$CLASS", className);
		code = code.Replace("$ROW_MEMBER_CODE", rowMemberCode);
		code = code.Replace("$ROW_READ_CODE", rowReadCode);
        code = code.Replace("$ROW_SAVE_CODE",rowSaveCode);
		code = code.Replace("$FIND_CODE", findCode);
		code = code.Replace("$ROW_WHILENULL_CODE1", whileNullCode1);
		code = code.Replace("$ROW_WHILENULL_CODE2", whileNullCode2);

        return code;
	}
}
